const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
function getCorrectImagePath(imagePath, category) {
  if (!imagePath || typeof imagePath !== 'string') return imagePath;

  // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
  const cleanPath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;

  // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (cleanPath.includes(`portfolio/${category}/`)) {
    return '/' + cleanPath;
  }

  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å images/portfolio/, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  if (cleanPath.startsWith('images/portfolio/')) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = path.basename(cleanPath);
    return `/images/portfolio/${category}/${fileName}`;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
  const fileName = path.basename(cleanPath);
  return `/images/portfolio/${category}/${fileName}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
function checkImageExists(imagePath) {
  const fullPath = path.join(__dirname, '..', 'public', imagePath.startsWith('/') ? imagePath.slice(1) : imagePath);
  return fs.existsSync(fullPath);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ markdown —Ñ–∞–π–ª–∞
function processMarkdownFile(filePath, category) {
  console.log(`\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${filePath}`);

  const content = fs.readFileSync(filePath, 'utf8');
  const { data, content: markdownContent } = matter(content);

  let hasChanges = false;

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (data.image) {
    const correctedPath = getCorrectImagePath(data.image, category);
    if (correctedPath !== data.image) {
      console.log(`  –ò—Å–ø—Ä–∞–≤–ª—è–µ–º image: ${data.image} -> ${correctedPath}`);
      data.image = correctedPath;
      hasChanges = true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if (!checkImageExists(data.image)) {
      console.warn(`  ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${data.image}`);
    }
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (data.images && Array.isArray(data.images)) {
    const correctedImages = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if (data.image) {
      correctedImages.push(data.image);
    }

    data.images.forEach(img => {
      if (typeof img === 'string') {
        const correctedPath = getCorrectImagePath(img, category);
        if (correctedPath !== img) {
          console.log(`  –ò—Å–ø—Ä–∞–≤–ª—è–µ–º images: ${img} -> ${correctedPath}`);
          hasChanges = true;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (correctedPath !== data.image) {
          correctedImages.push(correctedPath);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if (!checkImageExists(correctedPath)) {
          console.warn(`  ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${correctedPath}`);
        }
      } else if (img && typeof img === 'object' && img.image) {
        const correctedPath = getCorrectImagePath(img.image, category);
        if (correctedPath !== img.image) {
          console.log(`  –ò—Å–ø—Ä–∞–≤–ª—è–µ–º images[].image: ${img.image} -> ${correctedPath}`);
          hasChanges = true;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (correctedPath !== data.image) {
          correctedImages.push(correctedPath);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if (!checkImageExists(correctedPath)) {
          console.warn(`  ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${correctedPath}`);
        }
      }
    });

    data.images = correctedImages;
  } else if (data.image) {
    // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ images –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    data.images = [data.image];
    hasChanges = true;
    console.log(`  –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ images —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (hasChanges) {
    const newContent = matter.stringify(markdownContent, data);
    fs.writeFileSync(filePath, newContent);
    console.log(`  ‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω`);
  } else {
    console.log(`  ‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function processCategory(categoryPath, categoryName) {
  console.log(`\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryName}`);

  if (!fs.existsSync(categoryPath)) {
    console.log(`  –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${categoryPath}`);
    return;
  }

  const files = fs.readdirSync(categoryPath);
  const markdownFiles = files.filter(file => file.endsWith('.md'));

  console.log(`  –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${markdownFiles.length}`);

  markdownFiles.forEach(file => {
    const filePath = path.join(categoryPath, file);
    processMarkdownFile(filePath, categoryName);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...\n');

  const portfolioDir = path.join(__dirname, '..', 'src', 'data', 'portfolio');

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categories = fs.readdirSync(portfolioDir).filter(item => {
    const itemPath = path.join(portfolioDir, item);
    return fs.statSync(itemPath).isDirectory();
  });

  console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  categories.forEach(category => {
    const categoryPath = path.join(portfolioDir, category);
    processCategory(categoryPath, category);
  });

  console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

module.exports = { main, processMarkdownFile, getCorrectImagePath };
