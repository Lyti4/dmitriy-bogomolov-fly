import fs from 'fs';
import path from 'path';

const IMAGES_DIR = 'public/images/portfolio';

async function cleanupImages() {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

  let cleaned = 0;
  let skipped = 0;

  // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è portfolio
  console.log('üìÅ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–Ω—è portfolio –ø–∞–ø–∫–∏...');

  const rootItems = fs.readdirSync(IMAGES_DIR);

  for (const item of rootItems) {
    const itemPath = path.join(IMAGES_DIR, item);
    const stat = fs.statSync(itemPath);

    if (stat.isFile() && (item.endsWith('.jpg') || item.endsWith('.jpeg') || item.endsWith('.png'))) {
      try {
        fs.unlinkSync(itemPath);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${item}`);
        cleaned++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${item}:`, error.message);
      }
    } else if (stat.isDirectory()) {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø–∞–ø–∫–∏: ${item}`);
      skipped++;
    }
  }

  // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É {{category}}
  const categoryDir = path.join(IMAGES_DIR, '{{category}}');
  if (fs.existsSync(categoryDir)) {
    console.log('\nüìÅ –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ {{category}}...');

    const categoryItems = fs.readdirSync(categoryDir);

    for (const item of categoryItems) {
      const itemPath = path.join(categoryDir, item);

      try {
        fs.unlinkSync(itemPath);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: {{category}}/${item}`);
        cleaned++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {{category}}/${item}:`, error.message);
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –ø–∞–ø–∫—É {{category}} –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
    try {
      fs.rmdirSync(categoryDir);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {{category}}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ {{category}} –Ω–µ —É–¥–∞–ª–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ø—É—Å—Ç–∞—è):`, error.message);
    }
  }

  console.log(`\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  console.log(`   –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${cleaned}`);
  console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${skipped}`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  console.log(`\nüìÅ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:`);
  showDirectoryStructure(IMAGES_DIR);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
function showDirectoryStructure(dir) {
  try {
    const items = fs.readdirSync(dir);

    for (const item of items) {
      const itemPath = path.join(dir, item);
      const stat = fs.statSync(itemPath);

      if (stat.isDirectory() && !item.startsWith('.')) {
        const files = fs.readdirSync(itemPath).filter(f => !f.endsWith('.md'));
        console.log(`   ${item}/ (${files.length} —Ñ–∞–π–ª–æ–≤)`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
cleanupImages().catch(console.error);
