import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';

const PORTFOLIO_DIR = 'src/data/portfolio';

async function organizeMarkdownFiles() {
  console.log('üìÅ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...\n');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .md —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –ø–∞–ø–∫–∏ portfolio
  const markdownFiles = fs.readdirSync(PORTFOLIO_DIR)
    .filter(file => file.endsWith('.md') && fs.statSync(path.join(PORTFOLIO_DIR, file)).isFile())
    .map(file => path.join(PORTFOLIO_DIR, file));

  const categoryStats = {};
  let processed = 0;
  let errors = 0;

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  for (const filePath of markdownFiles) {
    try {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      const fileName = path.basename(filePath);

      let frontmatter;
      let content = '';

      // –ü–∞—Ä—Å–∏–Ω–≥ frontmatter (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
      if (fileContent.startsWith('---')) {
        const { data, content: markdownContent } = matter(fileContent);
        frontmatter = data;
        content = markdownContent;
      } else {
        // –ü–∞—Ä—Å–∏–º –∫–∞–∫ YAML –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        const lines = fileContent.split('\n');
        frontmatter = {};
        let contentStartIndex = 0;

        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
          if (line.trim() === '') continue;
          if (line.includes(':')) {
            const [key, ...valueParts] = line.split(':');
            const value = valueParts.join(':').trim();

            if (key.trim() === 'images') {
              contentStartIndex = i + 1;
              if (!frontmatter.images) frontmatter.images = [];
              continue;
            } else if (line.startsWith('  - ') && frontmatter.images) {
              const imageValue = line.replace('  - ', '').trim();
              if (imageValue.startsWith("'") || imageValue.startsWith('"')) {
                frontmatter.images.push(imageValue.slice(1, -1));
              } else {
                frontmatter.images.push(imageValue);
              }
              contentStartIndex = i + 1;
              continue;
            }

            if (value.startsWith("'") || value.startsWith('"')) {
              frontmatter[key.trim()] = value.slice(1, -1);
            } else {
              frontmatter[key.trim()] = value;
            }
            contentStartIndex = i + 1;
          } else {
            break;
          }
        }

        content = lines.slice(contentStartIndex).join('\n').trim();
      }

      const category = frontmatter.category;

      if (!category) {
        console.log(`‚ö†Ô∏è  ${fileName}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (!categoryStats[category]) {
        categoryStats[category] = [];
      }
      categoryStats[category].push(fileName);

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const categoryDir = path.join(PORTFOLIO_DIR, category);
      if (!fs.existsSync(categoryDir)) {
        fs.mkdirSync(categoryDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${category}/`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
      const updatedFrontmatter = { ...frontmatter };

      if (updatedFrontmatter.image) {
        updatedFrontmatter.image = updateImagePath(updatedFrontmatter.image);
      }

      if (updatedFrontmatter.images && Array.isArray(updatedFrontmatter.images)) {
        updatedFrontmatter.images = updatedFrontmatter.images.map(img => {
          if (typeof img === 'string') {
            return updateImagePath(img);
          } else if (img && img.image) {
            return { ...img, image: updateImagePath(img.image) };
          }
          return img;
        });
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞
      const updatedContent = matter.stringify(content, updatedFrontmatter);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const newFilePath = path.join(categoryDir, fileName);
      fs.writeFileSync(newFilePath, updatedContent);

      console.log(`‚úÖ ${fileName} ‚Üí ${category}/`);
      processed++;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${path.basename(filePath)}:`, error.message);
      errors++;
    }
  }

  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processed}`);
  console.log(`   –û—à–∏–±–æ–∫: ${errors}`);

  console.log(`\nüìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`);
  for (const [category, files] of Object.entries(categoryStats)) {
    console.log(`   ${category}: ${files.length} —Ñ–∞–π–ª–æ–≤ (${files.join(', ')})`);
  }

  // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è
  console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è...`);
  let deleted = 0;

  for (const filePath of markdownFiles) {
    try {
      fs.unlinkSync(filePath);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${path.basename(filePath)}`);
      deleted++;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${path.basename(filePath)}:`, error.message);
    }
  }

  console.log(`\nüéâ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  console.log(`   –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: ${processed} —Ñ–∞–π–ª–æ–≤`);
  console.log(`   –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–Ω—è: ${deleted} —Ñ–∞–π–ª–æ–≤`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  console.log(`\nüìÅ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ src/data/portfolio:`);
  showDirectoryStructure(PORTFOLIO_DIR);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
function updateImagePath(imagePath) {
  if (!imagePath || typeof imagePath !== 'string') return imagePath;

  // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ —Å–ª–µ—à–∏
  const cleanPath = imagePath.replace(/^\/+/, '');

  // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å images/portfolio), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (cleanPath.startsWith('images/portfolio/')) {
    return '/' + cleanPath;
  }

  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å public/, —É–±–∏—Ä–∞–µ–º public/
  if (cleanPath.startsWith('public/')) {
    return '/' + cleanPath.replace('public/', '');
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
  const fileName = path.basename(cleanPath);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
  return imagePath;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
function showDirectoryStructure(dir) {
  try {
    const items = fs.readdirSync(dir);

    for (const item of items) {
      const itemPath = path.join(dir, item);
      const stat = fs.statSync(itemPath);

      if (stat.isDirectory() && !item.startsWith('.') && !item.startsWith('public')) {
        const files = fs.readdirSync(itemPath).filter(f => f.endsWith('.md'));
        console.log(`   ${item}/ (${files.length} .md —Ñ–∞–π–ª–æ–≤)`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
organizeMarkdownFiles().catch(console.error);
