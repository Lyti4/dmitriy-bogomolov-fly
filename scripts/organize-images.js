import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';

const PORTFOLIO_DIR = 'src/data/portfolio';
const IMAGES_DIR = 'public/images/portfolio';

async function organizeImages() {
  console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...\n');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .md —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  const portfolioFiles = fs.readdirSync(PORTFOLIO_DIR)
    .filter(file => file.endsWith('.md'))
    .map(file => path.join(PORTFOLIO_DIR, file));

  const imageMovements = new Map(); // image path -> target category
  const processedFiles = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  for (const filePath of portfolioFiles) {
    try {
      const fileContent = fs.readFileSync(filePath, 'utf8');

      let frontmatter;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ frontmatter —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
      if (fileContent.startsWith('---')) {
        const { data } = matter(fileContent);
        frontmatter = data;
      } else {
        // –ü–∞—Ä—Å–∏–º –∫–∞–∫ YAML –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        const lines = fileContent.split('\n');
        frontmatter = {};

        for (const line of lines) {
          if (line.trim() === '') continue;
          if (line.includes(':')) {
            const [key, ...valueParts] = line.split(':');
            const value = valueParts.join(':').trim();

            if (key.trim() === 'images' || key.trim() === 'image') {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
              if (value.startsWith("'") || value.startsWith('"')) {
                frontmatter[key.trim()] = value.slice(1, -1);
              } else if (value.startsWith('[')) {
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –º–∞—Å—Å–∏–≤
                try {
                  frontmatter[key.trim()] = JSON.parse(value);
                } catch {
                  frontmatter[key.trim()] = value;
                }
              } else {
                frontmatter[key.trim()] = value;
              }
            } else {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
              if (value.startsWith("'") || value.startsWith('"')) {
                frontmatter[key.trim()] = value.slice(1, -1);
              } else {
                frontmatter[key.trim()] = value;
              }
            }
          } else if (line.startsWith('  - ') && frontmatter.images) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (!Array.isArray(frontmatter.images)) {
              frontmatter.images = [];
            }
            const imageValue = line.replace('  - ', '').trim();
            if (imageValue.startsWith("'") || imageValue.startsWith('"')) {
              frontmatter.images.push(imageValue.slice(1, -1));
            } else {
              frontmatter.images.push(imageValue);
            }
          }
        }
      }

      const fileName = path.basename(filePath);
      const category = frontmatter.category;

      if (!category) {
        console.log(`‚ö†Ô∏è  ${fileName}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        continue;
      }

      processedFiles.push({ fileName, category, frontmatter });

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ frontmatter
      const allImages = [];

      // –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (frontmatter.image) {
        allImages.push(frontmatter.image);
      }

      // –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (frontmatter.images && Array.isArray(frontmatter.images)) {
        for (const imageItem of frontmatter.images) {
          if (typeof imageItem === 'string') {
            allImages.push(imageItem);
          } else if (imageItem && imageItem.image) {
            allImages.push(imageItem.image);
          }
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      for (const imagePath of allImages) {
        if (typeof imagePath !== 'string') continue;
        const cleanPath = imagePath.replace(/^\/+/, ''); // —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ —Å–ª–µ—à–∏
        const imageName = path.basename(cleanPath);

        // –ò—â–µ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        const possiblePaths = [
          path.join(IMAGES_DIR, imageName),
          path.join(IMAGES_DIR, cleanPath),
          ...findImageInSubdirs(IMAGES_DIR, imageName)
        ];

        let foundPath = null;
        for (const possiblePath of possiblePaths) {
          if (fs.existsSync(possiblePath)) {
            foundPath = possiblePath;
            break;
          }
        }

        if (foundPath) {
          imageMovements.set(foundPath, category);
        } else {
          console.log(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${imagePath} (—Ñ–∞–π–ª: ${fileName})`);
        }
      }

      console.log(`‚úÖ ${fileName}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${category}", –Ω–∞–π–¥–µ–Ω–æ ${allImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    }
  }

  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles.length}`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${imageMovements.size}`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
  const categoriesReport = {};
  for (const [imagePath, category] of imageMovements) {
    if (!categoriesReport[category]) categoriesReport[category] = [];
    categoriesReport[category].push(path.basename(imagePath));
  }

  console.log(`\nüìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`);
  for (const [category, images] of Object.entries(categoriesReport)) {
    console.log(`   ${category}: ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n`);

  let moved = 0;
  let errors = 0;

  for (const [currentPath, targetCategory] of imageMovements) {
    try {
      const imageName = path.basename(currentPath);
      const targetDir = path.join(IMAGES_DIR, targetCategory);
      const targetPath = path.join(targetDir, imageName);

      // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!fs.existsSync(targetDir)) {
        fs.mkdirSync(targetDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${targetDir}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–µ
      if (currentPath === targetPath) {
        console.log(`‚è≠Ô∏è  ${imageName}: —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ (${targetCategory})`);
        continue;
      }

      // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (fs.existsSync(targetPath)) {
        console.log(`‚ö†Ô∏è  ${imageName}: —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ${targetCategory}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
      fs.renameSync(currentPath, targetPath);
      console.log(`‚úÖ ${imageName}: ${path.dirname(currentPath)} ‚Üí ${targetCategory}`);
      moved++;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ ${currentPath}:`, error.message);
      errors++;
    }
  }

  console.log(`\nüéâ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  console.log(`   –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${moved}`);
  console.log(`   –û—à–∏–±–æ–∫: ${errors}`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
  console.log(`\nüìÅ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:`);
  showDirectoryStructure(IMAGES_DIR);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö
function findImageInSubdirs(dir, imageName) {
  const found = [];

  function searchRecursive(currentDir) {
    try {
      const items = fs.readdirSync(currentDir);

      for (const item of items) {
        const itemPath = path.join(currentDir, item);
        const stat = fs.statSync(itemPath);

        if (stat.isDirectory()) {
          searchRecursive(itemPath);
        } else if (item === imageName) {
          found.push(itemPath);
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–∞–º
    }
  }

  searchRecursive(dir);
  return found;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
function showDirectoryStructure(dir) {
  try {
    const items = fs.readdirSync(dir);

    for (const item of items) {
      const itemPath = path.join(dir, item);
      const stat = fs.statSync(itemPath);

      if (stat.isDirectory() && !item.startsWith('.') && item !== '{{category}}') {
        const files = fs.readdirSync(itemPath).filter(f => !f.endsWith('.md'));
        console.log(`   ${item}/ (${files.length} —Ñ–∞–π–ª–æ–≤)`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
organizeImages().catch(console.error);
